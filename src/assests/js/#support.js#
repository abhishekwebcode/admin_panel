import {
    panel
} from './panel';
import {
    MDCRipple
} from '@material/ripple'
import {
    MDCTextField
} from '@material/textfield'
import {
    showHeaderDefault,
    drawer
} from '../templates/templates';

import {
    requestCreator
} from './services';


function supportUser() {
    if(localStorage.getItem('selectedOffice')) {
        panel(localStorage.getItem('selectedOffice'))
        return
    }
    showHeaderDefault('support');
}

function newOfficeForm() {
    import {MDCNotchedOutline} from '@material/notched-outline';

    const card = document.createElement('div')
    card.className = 'mdc-card office-creation-card'
    const formAttrs = [
       {
            id:'office-name',
            type:'text',
            required:true
            
        },
        {
            id:'first-contact',
            type:'text',
            required:true

        },
        {
            id:'second-contact',
            type:'text',
        
        },
        {
            id:'date-of-establishment',
            type:'date',
        },
        {
            id:'head-office-location',
            type:'text'
        },
        {
            id:'trial-start',
            type:'date'
        },
        {
            id:'trial-end',
            type:'date'
        },
        {
            id:'GST-number',
            type:'text'
        }
    ]
    for (let index = 0; index < 7; index++) {
        
        const form = document.createElement('div')
        form.className = 'mdc-form-field';
        const label = document.createElement('label');
        label.htmlFor = formAttrs[index].id
        
        label.textContent = labelText;
        const textField = document.createElement('div')
        textField.className = 'mdc-text-field mdc-text-field--outlined';
        const input = document.createElement('input');
        input.type =formAttrs[index].type;
        input.id = formAttrs[index].id;
        input.className = 'mdc-text-field__input'
        input.required = formAttrs[index].required
        
        const notchedOutline = document.createElement('div');
        notchedOutline.className = 'mdc-notched-outline';
	
        const notchedOutlineLeading = document.createElement('div');
        notchedOutlineLeading.className = 'mdc-notched-outline__leading';

        const notchedOutlineNotch = document.createElement('div');
        notchedOutlineNotch.className = 'mdc-notched-outline__notch';
	
        const label = document.createElement('label');
        label.className = 'mdc-floating-label';
        let labelText = '';
        label.textContent = formAttrs[index].id.forEach(function(name){
            labelText += name.charAt(0).toUpperCase()+name.slice(1) +' '
        })
        label.textContent = labelText;

        notchedOutlineNotch.appendChild(label);

        const notchedOutlineTrailing = document.createElement('div');
        notchedOutlineTrailing.className = 'mdc-notched-outline__trailing';

        notchedOutline.appendChild(notchedOutlineLeading);
        notchedOutline.appendChild(notchedOutlineNotch);
        notchedOutline.appendChild(notchedOutlineTrailing);
        const notchedOutline = new MDCNotchedOutline(document.querySelector('.mdc-notched-outline'));

        card.appendChild(form);

    }

      
    document.querySelector('#app').appendChild(card.outerHTM)L;
    document.querySelector('#trial-start').value = getTodayDate




    const officeObject = {
            template: "office",
            office: '',
            venue: [{
                "venueDescriptor": "Head Office",
                "location": "",
                "address": "",
		
                "geopoint": {
                    "latitude": '',
                    "longitude": ''
                }
            }],
            schedule: [{
                    "name": "Date Of Establishment",
                    "startTime": document.getElementById('establishment-startTime'),
                    "endTime": ""
                },
                {
                    "name": "Trial Period",
                    "startTime": "",
                    "endTime": ""
                }
            ],
            share:[],
            attachment: {
                "Name": {
                    "value": '',
                    "type": "string"
                },
                "GST Number": {
                    "value": document.getElementById("GST").value,
                    "type": "string"
                },
                "First Contact": {
                    "value": "",
                    "type": 'phoneNumber'
                },
                "Second Contact": {
                    "value":'',
                    "type": "phoneNumber"
                }
            }
        }


    
        const firstContact = document.getElementById('first-contact').value
        const secondContact = document.getElementById('second-contact').value
        const office = document.getElementById('office').value
        const trialStart = document.getElementById('trial-start')
        const trialEnd = document.getElementById('trial-end')
        const headOfficeInput = document.getElementById('head-office-location')
        const headOffice = headOfficeInput.dataset
        const establishment = document.getElementById('establishment-startTime')
        // required
        if (firstContact === '' || office === '') {
            formError('First Please all the required fields')
            return
        }

        if (!checkNumber(formatNumber(firstContact))) {
            formError('Please Enter A valid First Contact Phone Number')
            return;
        }
        if(secondContact){
            if(!checkNumber(formatNumber(secondContact))) {
                formError('Please Enter A valid Second Contact Phone Number')
                return
            }

            officeObject.attachment['Second Contact'].value = formatNumber(secondContact)
        
        }

        officeObject.attachment['First Contact'].value = formatNumber(firstContact)


        // date
        if (Date.parse(trialStart.value) > Date.parse(trialEnd.value)) {
            formError("Trial Period's End Time cannot be less than Start Time")
            return
        }
        officeObject.schedule.forEach(function (key) {

            if (key.name === 'Trial Period') {

                key.startTime = Date.parse(trialStart.value) || ''
                key.endTime = Date.parse(trialEnd.value) || ''
            }
            if (key.name === "Date Of Establishment") {
                key.startTime = Date.parse(establishment.value)
            }

        })

        officeObject.venue[0].location = headOffice.location || ''
        officeObject.venue[0].address = headOffice.address || ''
        officeObject.venue[0].geopoint['latitude'] = parseFloat(headOffice.lat) || ''
        officeObject.venue[0].geopoint['longitude'] = parseFloat(headOffice.lng) || ''

        officeObject.office = office

        //validate for existing office 
        document.getElementById('form-validation-message').innerHTML = loader().outerHTML
        requestCreator('search', {office:office}).then(function (event) {
            console.log(event)
            existingOfficeSuccess(event.data.data, officeObject)
        }, function (error) {
            formError(error)
        })
    }
}

function existingOfficeSuccess(result, officeObject) {
    if (result.indexOf(officeObject.office) > -1) {
        formError(`${officeObject.office} Already Exist`)
    } else {
        officeObject.attachment.Name.value = officeObject.office
        requestCreator('createOffice', officeObject).then(function (success) {
            officeCreationSucess(officeObject.office)
        }, function (error) {
            formError(error)
        })
    }
}

function officeCreationSucess() {
    panel(office)
    return
}

function formError(error) {

    console.log(error)
    document.getElementById('form-validation-message').innerHTML = error
}


String.prototype.toTitleCase = function () {
    return this.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()
    })
}

function initializeAutocompleteGoogle(autocomplete, input) {


    autocomplete.addListener('place_changed', function () {
        let place = autocomplete.getPlace();

        if (!place.geometry) {
            console.log("empty location")
            input.dataset.location = input.value
            input.dataset.address = ''
            input.dataset.lat = ''
            input.dataset.lng = ''
            return
        }
        //  document.getElementById('location--container').style.marginTop = '0px'

        var address = '';
        if (place.address_components) {
            address = [
                (place.address_components[0] && place.address_components[0].short_name || ''),
                (place.address_components[1] && place.address_components[1].short_name || ''),
                (place.address_components[2] && place.address_components[2].short_name || '')
            ].join(' ');
        }

        input.dataset.location = place.name
        input.dataset.address = address
        input.dataset.lat = place.geometry.location.lat()
        input.dataset.lng = place.geometry.location.lng()

    })
}


function getTodayDate() {
    const today = new Date().toLocaleDateString()
    const split = today.split("/")
    return split[2] + '-' + split[0] + '-' + split[1]
    // return today
}

function checkNumber(number) {
    const expression = /^\+[1-9]\d{11,14}$/
    return expression.test(number)
}

function formatNumber(numberString) {
    let number = numberString;
    if (number.substring(0, 2) === '91') {
        number = '+' + number
    } else if (number.substring(0, 3) !== '+91') {
        number = '+91' + number
    }

    return number
}

function loader(nameClass) {
    const div = document.createElement('div')
    div.className = 'loader ' + nameClass
    return div
}




export {
    supportUser,
    newOfficeForm
}